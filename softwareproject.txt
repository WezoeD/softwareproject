DELETE FORM 
**********************************************************************************
package midTerm;
import static javax.swing.JOptionPane.YES_OPTION;

import java.awt.*;
import javax.swing.*;

import java.awt.event.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.SQLException;

public class Form3 extends JFrame implements ActionListener{

	Connection connection = null;  
	ResultSet resultSet = null;  
	Statement statement = null; 
	
    public static void main(String[] args) {
        Form3 f3 = new Form3();
    }

	
    JPanel leftP = new JPanel();
    JPanel rightP = new JPanel();
    
    JTextField tf1 = new JTextField(5);
    JButton botton1 = new JButton("Search");
    JButton botton2 = new JButton("Delete ");
    JButton botton3 = new JButton("Cancel");
    
    
    
    JLabel bkID = new JLabel("-");
    JLabel fulName = new JLabel("-");
    JLabel pNo = new JLabel("-");
    JLabel trip = new JLabel("-");
    JLabel depa = new JLabel("-");
   
    
    public Form3(){
        setSize (400,690);
        setTitle("Delete Reservations");
        setLayout(new FlowLayout());
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
       
        add(leftP);
        
        leftP.add(new JLabel("Enter a booking ID to Delete: "));
        leftP.add(botton2);
        leftP.add(botton1);
        leftP.setPreferredSize(new Dimension (370,40));
      
        
        arrangeRest();
        
        add(botton2);
        add(botton3);
        botton2.addActionListener(this);
        botton3.addActionListener(this);
        botton1.addActionListener(this);
        setVisible(true);
    }
    
    public void arrangeRest(){
        add(rightP);
        
        rightP.setPreferredSize(new Dimension (370,450));
        rightP.setLayout(new GridLayout(11,2));
        
        rightP.add(new JLabel("Inventory_ID: ", JLabel.LEFT));
        rightP.add(bkID, LEFT_ALIGNMENT);
        rightP.add(new JLabel("Item_Name: ", JLabel.LEFT));
        rightP.add(fulName, LEFT_ALIGNMENT);
        rightP.add(new JLabel("Units_Of_Measurement: ", JLabel.LEFT));
        rightP.add(pNo, LEFT_ALIGNMENT);
        rightP.add(new JLabel("Supply_Date: ", JLabel.LEFT));
        rightP.add(trip, LEFT_ALIGNMENT);
        rightP.add(new JLabel("Category: ", JLabel.LEFT));
        rightP.add(depa, LEFT_ALIGNMENT);
       
    }
    
    public void actionPerformed(ActionEvent e) {
        if(e.getSource()== botton1){
            
            
            try {
            	Class.forName("org.sqlite.JDBC");
    			connection = DriverManager.getConnection("jdbc:sqlite:src//flight.db");
    			
    			String sql ="Select * FROM FlightReservation WHERE BookingID = ?";
    			PreparedStatement pst = connection.prepareStatement(sql);
    			
    			pst.setString(1, botton2.getText());
    			ResultSet rs = pst.executeQuery();
    			
    			int boID = 0;
    			
    			if(rs.next()){
    				
    			boID = rs.getInt("BookingID");
    			try{
    			if(boID != rs.getInt("BookingID")){
    				JOptionPane.showMessageDialog(this, botton2.getText() +" Crosscheck Book ID from Flight Reservation");
    			}
    			}

                catch (SQLException a) {
        		a.printStackTrace();
        		
        	} catch (Exception b) {
    			// TODO Auto-generated catch block
    			b.printStackTrace();not
    		}
    			String boID2 = ""+ boID;
    			bkID.setText(boID2);
				
				String fna = rs.getString("FirstName")+" " +rs.getString("LastName");
				fulName.setText(fna);		
					
				String psNo = rs.getString("PassportNo");
				pNo.setText(psNo);
				
				String tryp = rs.getString("Trip");
				trip.setText(tryp);
				
				String s1 = rs.getString("FlightFrom");
				String s2 = rs.getString("FlightTo");
				
				String dd = rs.getString("Departure");
				depa.setText(dd);
				
				
						
			}	
    			rs.close();  // closes the connection with the database
        		pst.close();
            }
    		
            catch (SQLException a) {
    		a.printStackTrace();
    		
    	} catch (Exception b) {
			// TODO Auto-generated catch block
			b.printStackTrace();
		}
        }
    
        
        if(e.getSource()== botton3){
            Form1 fr = new Form1();
            dispose();
        }
        
        if(e.getSource()== botton2){
        	if(JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this?")==YES_OPTION){
        		{
        			 try{
        					String query = "delete from FlightReservation where BookingID = '"+ botton2.getText()+"'";
        					PreparedStatement pst = connection.prepareStatement(query);
        					
        					pst.execute();
        					JOptionPane.showMessageDialog(null, "Record of " + botton2.getText() + " is Deleted");
        					
        					botton2.setText("");
        					
        					bkID.setText("-");
        					fulName.setText("-");
        					pNo.setText("-");
        					
        					trip.setText("-");
        					depa.setText("-");
        					
        					
        					pst.close();

        				}catch (Exception a){
        					a.printStackTrace();
        					}
        				Form1 fr = new Form1();
        	            dispose();
        				}
	}
}
    }
}
    
********************************************************************************
FORM 1 action performed 
public void actionPerformed(ActionEvent e) {
		if(e.getSource()==b)
		{
		Form2 f2=new Form2();

	
		dispose();
		}
		if(e.getSource()==b2){
			Form3 f3=new Form3();
			dispose();
		}
	}

}
********************************************************************

ADD NEW RECORD 
import java.awt.*;
import javax.swing.*;

import java.awt.event.*;

import java.sql.Connection; 
import java.sql.DriverManager;  
import java.sql.ResultSet;  
import java.sql.Statement; 
import java.text.Format;
import java.text.ParseException;

public class Booking extends JFrame implements ActionListener{

		public static int totalAmount;
		public static int totalAmount1;
		public static int totalAmount2;
		public static int totalAmount3;
		public static int totalAmount4;
		
		//String fname = null, lstname = null, pasNo = null;
		public static String fname;
		public static String lstname;
		public static String pasNo;
    
        public static String fly = "";
        public static String cas = "";
        public static String pssi = "";
        
	  	public static String tripx = "";
	  	public static String  disax = "";
	  	
	  	public String trips = "";
	  	public String trp1 = "One Way";
	  	public String trpR = "Round Trip";
	  	
	  	public String disable = "";
	  	public String visi, heari, mobi;
	  	
	 	Connection connection = null;  
		ResultSet resultSet = null;  
		Statement statement = null;  
	/*	
	public static void main(String[] args) {
		Booking bk = new Booking();
		
		
	}*/
	String [] depart1o = {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16",
			"17","18","19","20","21","22","23","24","25","26","27","28","29","30"};
	String [] depart2o = {"1","2","3","4","5","6","7","8","9","10","11","12"};
	String [] depart3o = {"2013","2014","2015", "2016", "2017", "2018"};
	
	String [] return1o = {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16",
			"17","18","19","20","21","22","23","24","25","26","27","28","29","30"};
	String [] return2o = {"1","2","3","4","5","6","7","8","9","10","11","12"};
	String [] return3o = {"2013","2014","2015", "2016", "2017", "2018"};
	
	String [] fromo = {"Istanbul", "Ankara", "Viyana", "Berlin", "Dubai", "London"};
	String [] too = {"Istanbul", "Ankara", "Viyana", "Berlin", "Dubai", "London"};
	
	String [] traveller = {"Infant", "Child", "Adult + $50", "Student - $30"};
    String [] classis = {"Economy ($100)", "Business ($300)", "First Class ($500)"};
	
	JPanel p1 = new JPanel();
	JPanel p2 = new JPanel();
	JPanel p3 = new JPanel();
	JPanel p4 = new JPanel();
	JPanel p5 = new JPanel();
	JPanel p6 = new JPanel();
	JPanel p7 = new JPanel();
    JPanel radios = new JPanel();
        
	JTextField name = new JTextField(20);
	JTextField lname = new JTextField(20);
	JTextField pport = new JTextField(12);
	
	public static JTextField flight = new JTextField(10);
	
	JRadioButton oneWay = new JRadioButton("One Way");
	JRadioButton rTrip = new JRadioButton("Round Trip");
	ButtonGroup orT = new ButtonGroup();
        
	JComboBox from = new JComboBox();
	JComboBox to = new JComboBox();
	
	JComboBox depart1 = new JComboBox();
	JComboBox depart2 = new JComboBox();
	JComboBox depart3 = new JComboBox();
	
	JComboBox return1 = new JComboBox();
	JComboBox return2 = new JComboBox();
	JComboBox return3 = new JComboBox();
	
	static JComboBox passenger = new JComboBox();
	static JComboBox classi = new JComboBox();
	
	JCheckBox visual = new JCheckBox("Visual");
	JCheckBox hearing = new JCheckBox("Hearing");
	JCheckBox mobility = new JCheckBox("Mobility");
	
	JButton  addbooking = new JButton("Add Booking");
	JButton  clear = new JButton("Clear");
	JButton  goback = new JButton("Go Back");
	JComboBox help = new JComboBox();
	
	public Booking(){
        setSize (750,620);
	    setTitle("Add New Booking");
	    setLayout(new FlowLayout());
	    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	   // setContentPane(new JLabel(new ImageIcon("C:src//booking2.jpg")));
	    //getContentPane().setBackground(Color.WHITE);
	    JLabel background=new JLabel(new ImageIcon("C:src//booking2.jpg"));
		add(background);
		background.setLayout(new FlowLayout());
	    
            orT.add(oneWay);
            orT.add(rTrip);
            
	    from.addItem("Place");
	    
	    for (String i:fromo)
        {
            this.from.addItem(i);
        }
	   
	    
	    to.addItem("Place");
	   
	    for (String i:too)
        {
            this.to.addItem(i);
        }
	    
	    depart1.addItem("Days");
	    depart2.addItem("Month");
	    depart3.addItem("Year");
	    
	    for (String i:depart1o)
        {
            this.depart1.addItem(i);
        }
	    for (String i:depart2o)
        {
            this.depart2.addItem(i);
        }
	    for (String i:depart3o)
        {
            this.depart3.addItem(i);
        }
	    
	    return1.addItem("Days");
	    return2.addItem("Month");
	    return3.addItem("Year");
	    
	    for (String i:return1o)
        {
            this.return1.addItem(i);
        }
	    for (String i:return2o)
        {
            this.return2.addItem(i);
        }
	    for (String i:return3o)
        {
            this.return3.addItem(i);
        }
	    
	    passenger.addItem("Passenger");
	    
	    for (String i:traveller)
        {
            this.passenger.addItem(i);
        }
	    
	    classi.addItem("Class");
	    
	    for (String i:classis)
        {
            this.classi.addItem(i);
        }
	    
	    flight.setEditable(false);
	    flight.setText("");
	    
	    help.addItem("Airline");
	    help.addItem("Emirates");
	    help.addItem("QatarAir");
	    help.addItem("TurkishAir");
	    help.addItem("AsiaAir");
	    
        arrangPan1();
            
	    
	    setVisible(true);
	   
	}
        public void arrangPan1(){
        add(p1);
	    add(p2);
	    add(p3);
	    add(p4);
	    add(p5);
	    add(p6);
	    add(p7);
	    
	    p1.add(new JLabel("FIRST NAME : "));
	    p1.add(name);
	    p1.add(new JLabel("LAST NAME : "));
	    p1.add(lname);
	    
        p2.setLayout(new GridLayout(4,2));
	    p2.add(new JLabel("PASSPORT NO : "));
	    p2.add(pport);
	    
            
	    p2.add(new JLabel("TRIP : "));
	    p2.add(radios);
            radios.add(oneWay);
            radios.add(rTrip);
            
	    p2.add(new JLabel("FROM : "));
	    p2.add(from);
	    p2.add(new JLabel("TO : "));
	    p2.add(to);
	    
	    arrangPan2();
	    
        p4.setLayout(new GridLayout(2,2));
	    p4.add(new JLabel("passenger : "));
	    p4.add(passenger);
	    p4.add(new JLabel("CLASS : "));
	    p4.add(classi);
	    
	    p5.add(new JLabel("DISABILITY : "));
	    p5.add(visual);
	    p5.add(hearing);
	    p5.add(mobility);
	    
	    p6.add(new JLabel("FLIGHT : "));
	    p6.add(flight);
	    p6.add(help);
	    
	    p7.add(addbooking);
	    p7.add(clear);
	    p7.add(goback);
	    
	    addbooking.addActionListener(this);
	    clear.addActionListener(this);
	    goback.addActionListener(this);
	  
	    
	    p1.setPreferredSize(new Dimension (850,30));
	    p2.setPreferredSize(new Dimension (350,110));
	    
	    p4.setPreferredSize(new Dimension (350,70));
	    p5.setPreferredSize(new Dimension (850,40));
	    p6.setPreferredSize(new Dimension (850,35));
	    p7.setPreferredSize(new Dimension (850,50));
	    
        }
        public void arrangPan2(){
            
           
        p3.setPreferredSize(new Dimension (610,70));
        p3.setLayout(new GridLayout(2,4));
        p3.add(new JLabel("DEPARTURE : "));
	    p3.add(depart1);
	    p3.add(depart2);
	    p3.add(depart3);
	    p3.add(new JLabel("RETURN : "));
	    p3.add(return1);
	    p3.add(return2);
	    p3.add(return3);
        }
        
        public static int passengerCost(){
        	int amount = 0;
        	
      		if(pssi.equals("Adult + $50")){
      		amount =  50;
      		totalAmount1 = amount;
      	}
      		if(pssi.equals("Student - $30")){
      		amount -= 30;
      		totalAmount1 = amount;
      	}
      		return totalAmount1;
        }
        
        public static int classCost(){
        	int amount = 0;
        	
      		if(cas.equals("Economy ($100)")){
      		amount =  100;
      		totalAmount2 = amount;
      	}
      		if(cas.equals("Business ($300)")){
      		amount += 300;
      		totalAmount2 = amount;
      	}
      		if(cas.equals("First Class ($500)")){
      		amount = 500;
      		totalAmount2 = amount;
      	}
      		
      		return totalAmount2;
        }
        
        public static int tris(){
        	int amount2 = 0;
        	
      		if(tripx.equals("OneWay")){
      			amount2 = amountCost()+ passengerCost()+ classCost();
      			totalAmount3 = amount2;
      		}
      		if(tripx.equals("Round Trip")){
      			amount2 = (amountCost()+ passengerCost()+ classCost())*2;
      			totalAmount3 = amount2;
      		}
      		return totalAmount3;
        }
        
        public static int amountCost(){
      		int airAmount =0;
      		
      		if(fly.equals("TurkishAir")){ 
        		airAmount = 200;
        		totalAmount4 = airAmount;
        	}
      		if(fly.equals("Emirates")){ 
        		airAmount = 180;
        		totalAmount4 = airAmount;
        	}
      		if(fly.equals("QatarAir")){ 
        		airAmount = 190;
        		totalAmount4 = airAmount;
        	}
      		if(fly.equals("AsiaAir")){ 
        		airAmount = 190;
        		totalAmount4 = airAmount;
        	}
      	return totalAmount4;
      	}
        
	public void actionPerformed(ActionEvent e) {
		
		if(e.getSource()== clear){
			this.name.setText("");
            this.lname.setText("");
            this.pport.setText("");
            this.flight.setText("");
            
            fname = "";
            lstname = "";
            pasNo = "";
            fly = "";
            cas = "";
            pssi = "";
    	  	tripx = "";
    	  	disax = "";
    	  	trips = "";
    	  	trp1 = "";
    	  	trpR = "";
    	  	disable = "";
    	  	visi = "";
    	  	heari = ""; 
    	  	mobi = "";
    	  	
            this.from.removeAllItems();
            this.to.removeAllItems();
            
            this.depart1.removeAllItems();
            this.depart2.removeAllItems();
            this.depart3.removeAllItems();
            
            this.return1.removeAllItems();
            this.return2.removeAllItems();
            this.return3.removeAllItems();
            
            this.passenger.removeAllItems();
            this.classi.removeAllItems();
            this.help.removeAllItems();
            
            this.visual.setSelected(false);
            this.hearing.setSelected(false);
            this.mobility.setSelected(false);
            
            from.addItem("Place");
    	    
    	    for (String i:fromo)
            {
                this.from.addItem(i);
            }
    	    
    	    
    	    to.addItem("Place");
    	   
    	    for (String i:too)
            {
                this.to.addItem(i);
            }
    	    
    	    depart1.addItem("Days");
    	    depart2.addItem("Month");
    	    depart3.addItem("Year");
    	    
    	    for (String i:depart1o)
            {
                this.depart1.addItem(i);
            }
    	    for (String i:depart2o)
            {
                this.depart2.addItem(i);
            }
    	    for (String i:depart3o)
            {
                this.depart3.addItem(i);
            }
    	    
    	    return1.addItem("Days");
    	    return2.addItem("Month");
    	    return3.addItem("Year");
    	    
    	    for (String i:return1o)
            {
                this.return1.addItem(i);
            }
    	    for (String i:return2o)
            {
                this.return2.addItem(i);
            }
    	    for (String i:return3o)
            {
                this.return3.addItem(i);
            }
    	    
    	    passenger.addItem("Passenger");
    	    
    	    for (String i:traveller)
            {
                this.passenger.addItem(i);
            }
    	    
    	    classi.addItem("Class");
    	    
    	    for (String i:classis)
            {
                this.classi.addItem(i);
            }
    	    help.addItem("Airline");
    	    help.addItem("Emirates");
    	    help.addItem("QatarAir");
    	    help.addItem("TurkishAir");
    	    help.addItem("AsiaAir");
    	    
            this.orT.clearSelection();
                    
                }
		
		
        if(e.getSource()== goback){
            FlightReserved fr = new FlightReserved();
            dispose();
        }
        
        try{

        	fname = name.getText().trim();
      	  	lstname = lname.getText().trim();
      	  	pasNo = pport.getText().trim();
      	  	
        	if(this.passenger.getSelectedIndex()== 3){
        		pssi += "Adult + $50";
        		 pssi = pssi;
        	}
        	if(this.passenger.getSelectedIndex()== 4){
        		pssi += "Student - $30";
        		pssi = pssi;
        	}
        	if(this.classi.getSelectedIndex()== 1){
        		cas += "Economy ($100)";
        		cas = cas;
        	}
        	if(this.classi.getSelectedIndex()== 2){
        		cas += "Business ($300)";
        		cas = cas;
        	}
        	if(this.classi.getSelectedIndex()== 3){
        		cas += "First Class ($500)";
        		cas = cas;
        	}
        	if(this.help.getSelectedItem() == "Emirates"){
        		fly += "Emirates";
        		this.flight.setText(fly);
        	}
        	if(this.help.getSelectedItem() == "QatarAir"){
        		fly += "QatarAir";
        		this.flight.setText(fly);
        	}
        	if(this.help.getSelectedItem() == "TurkishAir"){
        		fly += "TurkishAir";
        		this.flight.setText("" + fly);
        	}
        	if(this.help.getSelectedItem() == "AsiaAir"){
        		fly += "AsiaAir";
        		this.flight.setText("" + fly);
        	}
        	
             if(oneWay.isSelected()){
           		tripx = "OneWay";
          	}
           	if(rTrip.isSelected()){
           		tripx = "Round Trip";
          	}
           	 
           	if(visual.isSelected()){
           		disax = "Blind";
           	}
           	if(hearing.isSelected()){
           		heari = 
           		disax = "Deaf";
           	}
           	if(mobility.isSelected()){
           		mobi = 
           		disax = "Lame";
           	}
           
        	
        }
        catch (Exception s) {
			// TODO: handle exception
        	s.printStackTrace();
		}
        
        	if(e.getSource()== addbooking){
                
        		if((name.getText().toString().equals(""))||(lname.getText().toString().equals(""))||(pport.getText().toString().equals(""))||(flight.getText().toString().equals(""))){
            		JOptionPane.showMessageDialog(null, "Please enter info for all field");
            	}
            	
            	else{
              		totalAmount = tris();
            		
            	String to5 = null, from5 = null, departdate = null, returndate = null, passa = null, classa = null;
        	   
          	to5 = to.getSelectedItem()+"";
          	from5 = from.getSelectedItem()+"";
          	departdate = depart1.getSelectedItem()+"/"+ depart2.getSelectedItem()+"/"+ depart3.getSelectedItem()+"";
          	returndate = return1.getSelectedItem()+"/"+ return2.getSelectedItem()+"/"+ return3.getSelectedItem()+"";
          	passa = passenger.getSelectedItem()+"";
          	classa = classi.getSelectedItem()+"";
          	
          	try{
    	    	Class.forName("org.sqlite.JDBC");
    	    	connection = DriverManager.getConnection("jdbc:sqlite:src//flight.db"); 
    	    	statement = connection.createStatement();
    String sql="insert into FlightReservation(FirstName,LastName,PassportNo,Trip,FlightFrom,FlightTo,Departure,Return,Passenger,FlightClass,Disability,Flight,Amount)"
    	+ "values('"+fname+"','"+lstname+"','"+pasNo+"','"+tripx+"','"+to5+"','"+from5+"','"+departdate+"',"
    			+ "'"+returndate+"','"+passa+"','"+classa+"','"+disax+"','"+flight.getText()+"','"+totalAmount+"')";


    	    	int exe = statement.executeUpdate(sql);
    	    	
    	    	if(exe==1){
    	    		JOptionPane.showMessageDialog(null, exe+" Record added successuflly");
    	    		
    	        	  dispose();
    	    	}
            }
            
        	catch(Exception k){
        	
        		k.printStackTrace();
        	}
        	FlightReserved fr = new FlightReserved();
        	this.name.setText("");
            this.lname.setText("");
            this.pport.setText("");
            this.flight.setText("");
            
            fname = "";
            lstname = "";
            pasNo = "";
            fly = "";
            cas = "";
            pssi = "";
    	  	tripx = "";
    	  	disax = "";
    	  	trips = "";
    	  	trp1 = "";
    	  	trpR = "";
    	  	disable = "";
    	  	visi = "";
    	  	heari = ""; 
    	  	mobi = "";
    	  	
            this.from.removeAllItems();
            this.to.removeAllItems();
            
            this.depart1.removeAllItems();
            this.depart2.removeAllItems();
            this.depart3.removeAllItems();
            
            this.return1.removeAllItems();
            this.return2.removeAllItems();
            this.return3.removeAllItems();
            
            this.passenger.removeAllItems();
            this.classi.removeAllItems();
            this.help.removeAllItems();
            
            this.visual.setSelected(false);
            this.hearing.setSelected(false);
            this.mobility.setSelected(false);
            
            from.addItem("Place");
    	    
    	    for (String i:fromo)
            {
                this.from.addItem(i);
            }
    	    
    	    
    	    to.addItem("Place");
    	   
    	    for (String i:too)
            {
                this.to.addItem(i);
            }


    	    depart1.addItem("Days");
    	    depart2.addItem("Month");
    	    depart3.addItem("Year");
    	    
    	    for (String i:depart1o)
            {
                this.depart1.addItem(i);
            }
    	    for (String i:depart2o)
            {
                this.depart2.addItem(i);
            }
    	    for (String i:depart3o)
            {
                this.depart3.addItem(i);
            }
    	    
    	    return1.addItem("Days");
    	    return2.addItem("Month");
    	    return3.addItem("Year");
    	    
    	    for (String i:return1o)
            {
                this.return1.addItem(i);
            }
    	    for (String i:return2o)
            {
                this.return2.addItem(i);
            }
    	    for (String i:return3o)
            {
                this.return3.addItem(i);
            }
    	    
    	    passenger.addItem("Passenger");
    	    
    	    for (String i:traveller)
            {
                this.passenger.addItem(i);
            }
    	    
    	    classi.addItem("Class");
    	    
    	    for (String i:classis)
            {
                this.classi.addItem(i);
            }
    	   
    	    //edited part
	    help.addItem("shaban");
	    help.addItem("sengz");
	    help.addItem("Wezoe");
	    help.addItem("dlamini");
            this.orT.clearSelection();
            dispose();
            
    }
        }
    
 }
   
}


